{"version":3,"sources":["components/Header/Header.jsx","components/BoardCreator/Components.js","utils/randomId.js","components/BoardCreator/BoardCreator.jsx","components/Board/Components.js","components/Board/Board.jsx","redux/reducers/boardsReducer.js","utils/configStorage.js","redux/reducers/headerReducer.js","components/Wrapper/Wrapper.jsx","components/Board/ActiveBoard/Components.js","components/Board/Task/Components.js","components/Board/Task/Task.jsx","components/Board/BoardItem/Components.js","components/Board/BoardItem/BoardItem.jsx","components/Board/ActiveBoard/ActiveBoard.jsx","components/Board/ActiveBoard/hook/useBoard.hook.js","App.js","serviceWorker.js","redux/store.js","index.js"],"names":["HeaderComponent","styled","header","HeaderLogo","div","Header","headerData","useSelector","state","color","style","background","to","textDecoration","CreatorComponent","CreatorTitle","p","CreatorColorCircle","CreatorBtns","CreatorForm","form","Math","floor","random","toFixed","colors","BoardCreator","createBoard","useState","name","boardData","setBoardData","onColorClick","ev","value","currentTarget","attributes","parentNode","querySelectorAll","forEach","opacity","prev","disabled","length","type","onChange","placeholder","display","margin","map","index","onClick","key","alert","JSON","stringify","id","randomId","BoardComponent","initialState","boards","activeBoardItems","activeBoardId","saveBoardsAndReturn","data","localStorage","setItem","deleteBoardAction","boardId","boardsReducer","action","newBoardState","board","filter","i","boardItems","push","item","j","itemId","tasks","unshift","task","z","taskId","isDone","changeHeaderColorAction","headerReducer","BoardList","Wrapper","dispatch","useDispatch","stateData","useEffect","deleteBoard","Board","onClickHandler","fontSize","ActiveBoardComponent","ActiveBoardList","ActiveBoardForm","TaskComponent","title","toggleIsDoneHandler","status","setIsDone","draggable","onDragStart","dataTransfer","setData","BoardItemComponent","BoardItemClose","setTask","deleteTask","toggleTaskStatus","newTask","setNewTask","deteteHandler","onDragEnter","preventDefault","onDragLeave","paddingBottom","onDragOver","onDrop","newTaskItem","parse","getData","some","onKeyDown","keyCode","width","Task","compose","withRouter","connect","setActiveBoardItems","setActiveBoardItem","deleteActiveBoardItem","setTaskToBoardItem","deleteTaskFromBoardItem","toggleItemTaskStatus","updateBoardColor","match","params","setBoard","getBoardData","useCallback","b","setBoardItem","useBoard","addMode","setAddMode","itemName","setItemName","isDeleted","setIsDeleted","deleteBoardTask","left","top","height","borderRadius","position","updateColor","BoardItem","onInput","boardItem","App","lsitems","getItem","err","removeItem","className","path","exact","component","ActiveBoard","Boolean","window","location","hostname","rootReducer","combineReducers","store","createStore","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.412a5b60.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useSelector } from 'react-redux';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst HeaderComponent = styled.header`\r\n    background: rgba(0, 0, 0, 0.3);\r\n    width: 100%;\r\n    height: 60px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    position: fixed;\r\n    top: 0;\r\n    left: 0;\r\n    right: 0;\r\n    z-index: 9999999999;\r\n`\r\n\r\nconst HeaderLogo = styled.div`\r\n    font-size: 30px;\r\n    font-weight: 500;\r\n    color: #fff;\r\n    font-family: 'Righteous', san-serif;\r\n    letter-spacing: 3px;\r\n`\r\n\r\nconst Header = () => {\r\n    let headerData = useSelector((state) => ({\r\n        color: state.header.color\r\n    }))\r\n\r\n    return (\r\n        <HeaderComponent style={{background: headerData.color}}>\r\n            <NavLink to={'/react-shello-app/'} style={{textDecoration: 'none'}}>\r\n                <HeaderLogo>\r\n                    Shello\r\n                </HeaderLogo>\r\n            </NavLink>\r\n        </HeaderComponent>\r\n    )\r\n}\r\n\r\nexport default Header;","import styled from 'styled-components';\r\n\r\nexport const CreatorComponent = styled.div`\r\n    display: flex;\r\n    flex-direction: column; \r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 450px;\r\n    height: 300px;\r\n    background: #fff;\r\n    border-radius: 15px;\r\n    margin: 20px;\r\n    box-shadow: 1px 2px 7px #a9a9a9;\r\n    margin: 0 auto;\r\n`\r\n\r\nexport const CreatorTitle = styled.p`\r\n    width: 70%;\r\n    font-size: 20px;\r\n    font-weight: 500;\r\n    padding: 15px 20px;\r\n    border-radius: 10px;\r\n    text-align: center;\r\n`\r\n\r\nexport const CreatorColorCircle = styled.div`\r\n    border-radius: 50%;\r\n    border: none;\r\n    width: 35px;\r\n    height: 35px; \r\n    opacity: 0.7;\r\n    box-shadow: 1px 1px 7px #dcdcdc;\r\n    margin: 5px;\r\n    cursor: pointer;\r\n\r\n    &:hover {\r\n        opacity: 1;\r\n    }\r\n`\r\n\r\nexport const CreatorBtns = styled.div`\r\n    display: flex;\r\n    flex-direction: center;\r\n    align-items: center;\r\n    width: 100%;\r\n    outline: none;\r\n\r\n    & > button {\r\n        width: 220px;\r\n        height: 35px;\r\n        margin: 10px;\r\n        border: none;\r\n        box-shadow: 0.5px 0.5px 4px #a9a9a9;\r\n        border-radius: 5px;\r\n        font-weight: 500;\r\n        font-size: 16px;\r\n        cursor: pointer;\r\n        background: #f2f2f2;\r\n\r\n        &:hover {\r\n            background: #fff;\r\n        }\r\n    }\r\n`\r\n\r\nexport const CreatorForm = styled.form`\r\n    margin: 20px 0 10px;\r\n\r\n    & > input {\r\n        background-color: hsla(0,0%,100%,.4);\r\n        border: none;\r\n        box-shadow: 2px 2px 10px #dcdcdc;\r\n        width: 250px;\r\n        height: 40px;\r\n        padding: 10px;\r\n        border-radius: 7px;\r\n        font-size: 18px;\r\n    }\r\n`","export default () => {\r\n    return +(Math.floor(Math.random() * 99999) + 10000).toFixed();\r\n}","import React from 'react';\r\nimport { useState } from 'react';\r\nimport { \r\n    CreatorBtns, \r\n    CreatorColorCircle, \r\n    CreatorComponent, \r\n    CreatorForm,\r\n    CreatorTitle\r\n} from './Components';\r\nimport randomId from '../../utils/randomId';\r\n\r\nexport let colors = [\r\n    'crimson',\r\n    'chocolate',\r\n    '#ed9eaa',\r\n    'coral',\r\n    'seagreen',\r\n    'dodgerblue',\r\n    'DarkKhaki',\r\n    '#323232'\r\n]\r\n\r\nconst BoardCreator = ({ createBoard }) => {\r\n    let [boardData, setBoardData] = useState({\r\n        name: '',\r\n        color: ''\r\n    })\r\n\r\n    const onChangeHandler = (ev) => {\r\n        let { value, name } = ev.currentTarget;\r\n\r\n        setBoardData(prev => ({\r\n            ...prev,\r\n            [name]: value\r\n        }))\r\n    }\r\n\r\n    const onColorClick = (ev) => {\r\n        let { value } = ev.currentTarget.attributes.value;\r\n        let colors = ev.currentTarget.parentNode.querySelectorAll('div');\r\n\r\n        colors.forEach(color => {\r\n            color.style.opacity = '';\r\n        })\r\n\r\n        setBoardData(prev => ({\r\n            ...prev,\r\n            color: value\r\n        }))\r\n\r\n        ev.currentTarget.style.opacity = '1';\r\n    }\r\n\r\n    const onAddBoard = () => {\r\n        alert(JSON.stringify(boardData));\r\n\r\n        let { name, color } = boardData;\r\n        let id = randomId();\r\n\r\n        setBoardData({\r\n            name: '',\r\n            color: ''\r\n        })\r\n\r\n        createBoard({ name, id, color });\r\n    }\r\n\r\n    const onClearHandler = () => {\r\n        setBoardData({\r\n            name: '',\r\n            color: ''\r\n        })\r\n    }\r\n\r\n    let disabled = !!boardData.name.length && !!boardData.color.length;\r\n\r\n    return (\r\n        <CreatorComponent>\r\n            <CreatorTitle style={{background: boardData.color.length ? boardData.color : '#fff', color: boardData.color.length ? '#fff' : '#000'}}>\r\n                Create board in Shello\r\n            </CreatorTitle>\r\n\r\n            <CreatorForm>\r\n                <input value={boardData.name} type=\"text\" name=\"name\" onChange={onChangeHandler} placeholder=\"Name of the board\" />\r\n            </CreatorForm>\r\n\r\n            <div style={{display: 'flex', margin: '5px 0 15px'}}>\r\n                {\r\n                    colors.map((color, index) => {\r\n                        return <CreatorColorCircle \r\n                            onClick={onColorClick} \r\n                            key={index} value={color} \r\n                            style={{background: color}} \r\n                        />\r\n                    })\r\n                }\r\n            </div>\r\n\r\n            <CreatorBtns>\r\n                <button onClick={onClearHandler}>Cancel</button>\r\n\r\n                <button disabled={!disabled} onClick={onAddBoard}>Create</button>\r\n            </CreatorBtns>\r\n        </CreatorComponent>\r\n    )\r\n}\r\n\r\nexport default BoardCreator;","import styled from 'styled-components';\r\n\r\nexport const BoardComponent = styled.div`\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n    width: 300px;\r\n    height: 120px;\r\n    border-radius: 15px;\r\n    background: #fff;\r\n    border-radius: 10px;\r\n    box-shadow: 1px 2px 6px #a9a9a9;\r\n    margin: 20px;\r\n    position: relative;\r\n    overflow: hidden;\r\n    cursor: pointer;\r\n    animation: fadeIn .4s ease;\r\n\r\n    & > p {\r\n        font-size: 18px;\r\n        font-weight: 400;\r\n        color: #fff;\r\n        position: absolute;\r\n        border-radius: 50%;\r\n        top: 10px;\r\n        right: 0;\r\n        left: 0;\r\n        height: 300px;\r\n        width: 300px;\r\n        text-align: center;\r\n        padding: 30px 0 0 0;\r\n        opacity: 0.9;\r\n        animation: fadeInUp .5s ease;\r\n    }\r\n\r\n    &:hover {\r\n        transform: scale(1.2); \r\n    }\r\n`","import React, { Fragment } from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\nimport { BoardComponent } from './Components';\r\n\r\nexport default ({ name, id, color }) => {\r\n    const showBoard = () => (\r\n        <BoardComponent>\r\n            <p style={{background: color}}>{name}</p>\r\n        </BoardComponent>\r\n    )\r\n\r\n    return <Fragment>\r\n        <NavLink to={`/board/${id}`}>\r\n            { showBoard() }\r\n        </NavLink>\r\n    </Fragment>\r\n}","import { saveData } from \"../../utils/configStorage\";\r\n\r\nconst ADD_DATA = 'boards/ADD_DATA', \r\n    SET_BOARD = 'SET_BOARD', \r\n    SET_ACTIVE_BOARD_ITEMS = 'SET_ACTIVE_BOARD_ITEMS', \r\n    SET_ACTIVE_BOARD_ITEM = 'SET_ACTIVE_BOARD_ITEM', \r\n    SET_TASK_TO_ITEM = 'SET_TASK_TO_ITEM',\r\n    DELETE_ACTIVE_BOARD_ITEM = 'DELETE_ACTIVE_BOARD_ITEM',\r\n    DELETE_BOARD = 'DELETE_BOARD',\r\n    DELETE_TASK_FROM_ITEM = 'DELETE_TASK_FROM_ITEM',\r\n    TOGGLE_ITEM_TASK_STATUS = 'TOGGLE_ITEM_TASK_STATUS',\r\n    UPDATE_BOARD_COLOR = 'UPDATE_BOARD_COLOR';\r\n\r\nlet initialState = {\r\n    boards: [],\r\n    activeBoardItems: [],\r\n    activeBoardId: ''\r\n}\r\n\r\nconst saveBoardsAndReturn = (state, boards) => {\r\n    saveData({ boards });\r\n\r\n    return {\r\n        ...state,\r\n        boards: [\r\n            ...boards\r\n        ]\r\n    }\r\n}\r\n\r\nconst boardsReducer = (state = initialState, action) => {\r\n    let newBoardState = [...state.boards];\r\n\r\n    switch(action.type) {\r\n        case ADD_DATA:\r\n            return {\r\n                ...state,\r\n                boards: [\r\n                    ...action.data\r\n                ]\r\n            }\r\n        case SET_BOARD:\r\n            newBoardState = [\r\n                ...state.boards,\r\n                action.board\r\n            ]\r\n\r\n            return saveBoardsAndReturn(state, newBoardState);\r\n        case UPDATE_BOARD_COLOR:\r\n            newBoardState.forEach(board => {\r\n                if(board.id === +action.data.boardId) {\r\n                    board.color = action.data.color\r\n                }\r\n            })\r\n\r\n            return saveBoardsAndReturn(state, newBoardState);\r\n        case DELETE_BOARD:\r\n            newBoardState = newBoardState.filter(i => i.id !== +action.boardId);\r\n\r\n            return saveBoardsAndReturn(state, newBoardState);\r\n        case SET_ACTIVE_BOARD_ITEMS:\r\n            return {\r\n                ...state,\r\n                activeBoardItems: [\r\n                    ...action.boardItems\r\n                ]\r\n            }\r\n        case SET_ACTIVE_BOARD_ITEM:\r\n            newBoardState.forEach(i => {\r\n                if(i.id === +action.data.boardId) {\r\n                    i.data.push(action.data.item);\r\n                }\r\n            })\r\n\r\n            return saveBoardsAndReturn(state, newBoardState);\r\n        case DELETE_ACTIVE_BOARD_ITEM:\r\n            newBoardState.forEach(i => {\r\n                if(i.id === +action.data.boardId) {\r\n                    i.data = i.data.filter(j => +j.id !== +action.data.itemId);\r\n                }\r\n            })\r\n\r\n            return saveBoardsAndReturn(state, newBoardState);\r\n        case SET_TASK_TO_ITEM:\r\n            newBoardState.forEach(i => {\r\n                if(i.id === +action.data.boardId) {\r\n                    i.data.forEach(j => {\r\n                        if(j.id === +action.data.itemId) {\r\n                            j.tasks.unshift(action.data.task);\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n\r\n            return saveBoardsAndReturn(state, newBoardState);\r\n        case TOGGLE_ITEM_TASK_STATUS:\r\n            newBoardState.forEach(i => {\r\n                if(i.id === +action.data.boardId) {\r\n                    i.data.forEach(j => {\r\n                        if(j.id === +action.data.itemId) {\r\n                            j.tasks.forEach(z => {\r\n                                if(z.id === action.data.taskId) {\r\n                                    z.isDone = action.data.isDone;\r\n                                }\r\n                            })\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n\r\n            return saveBoardsAndReturn(state, newBoardState);\r\n        case DELETE_TASK_FROM_ITEM:\r\n            newBoardState.forEach(i => {\r\n                if(i.id === +action.data.boardId) {\r\n                    i.data.forEach(j => {\r\n                        if(j.id === +action.data.itemId) {\r\n                            j.tasks = j.tasks.filter(z => +z.id !== +action.data.taskId);\r\n                        }\r\n                    })\r\n                }\r\n            })\r\n\r\n            return saveBoardsAndReturn(state, newBoardState);\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\n// Board Actions\r\nexport const setBoardDataAction = (data) => ({ type: ADD_DATA, data });\r\nexport const setBoardItemAction = (board) => ({ type: SET_BOARD, board });\r\nexport const setActiveBoardItems = (boardItems) => ({ type: SET_ACTIVE_BOARD_ITEMS, boardItems });\r\nexport const updateBoardColor = ({ boardId, color }) => ({ type: UPDATE_BOARD_COLOR, data: { boardId, color } });\r\n// Item Actions\r\nexport const setActiveBoardItem = ({ item, boardId }) => ({ type: SET_ACTIVE_BOARD_ITEM, data: { item, boardId } });\r\n// Task Actions\r\nexport const setTaskToBoardItem = ({ task, itemId, boardId }) => ({ type: SET_TASK_TO_ITEM, data: { task, itemId, boardId } });\r\nexport const toggleItemTaskStatus = ({ taskId, itemId, boardId, isDone }) => ({ type: TOGGLE_ITEM_TASK_STATUS, data: { taskId, itemId, boardId, isDone } });\r\n// DELETE Actions\r\nexport const deleteActiveBoardItem = ({ itemId, boardId }) => ({ type: DELETE_ACTIVE_BOARD_ITEM, data: { itemId, boardId } });\r\nexport const deleteBoardAction = (boardId) => ({ type: DELETE_BOARD, boardId });\r\nexport const deleteTaskFromBoardItem = ({ taskId, itemId, boardId }) => ({ type: DELETE_TASK_FROM_ITEM, data: { taskId, itemId, boardId } });\r\n\r\nexport default boardsReducer;","const STORAGE_NAME = 'shelloData';\r\n\r\nexport const saveData = (data) => {\r\n    localStorage.setItem(STORAGE_NAME, JSON.stringify(data));\r\n}\r\n\r\nexport const getData = () => {\r\n    return JSON.parse(localStorage.getItem(STORAGE_NAME) || '{ \"boards\": [] }');\r\n}\r\n\r\nexport const deleteData = () => {\r\n    localStorage.removeItem(STORAGE_NAME);\r\n}","const CHANGE_COLOR = 'CHANGE_COLOR';\r\n\r\nlet initialState = {\r\n    color: 'rgba(0, 0, 0, 0.3)'\r\n}\r\n\r\nconst headerReducer = (state = initialState, action) => {\r\n    switch(action.type) {\r\n        case CHANGE_COLOR:\r\n            return {\r\n                color: action.color\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport const changeHeaderColorAction = (color) => ({ type: CHANGE_COLOR, color });\r\n\r\nexport default headerReducer;","import React, { useEffect } from 'react';\r\nimport BoardCreator from '../BoardCreator/BoardCreator';\r\nimport Board from '../Board/Board';\r\nimport styled from 'styled-components';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setBoardItemAction, deleteBoardAction } from '../../redux/reducers/boardsReducer';\r\nimport { changeHeaderColorAction } from '../../redux/reducers/headerReducer';\r\n\r\nconst BoardList = styled.div`\r\n    display: flex;\r\n    flex-wrap: wrap;\r\n    align-items: center;\r\n    width: 90%;\r\n    margin: 20px auto;\r\n`\r\n\r\nconst Wrapper = () => {\r\n    let dispatch = useDispatch();\r\n    let stateData = useSelector((state) => ({\r\n        boards: state.boardData.boards\r\n    }))\r\n\r\n    useEffect(() => {\r\n        dispatch(changeHeaderColorAction('rgba(0, 0, 0, 0.3)'))\r\n    }, [dispatch])\r\n\r\n    const createBoard = ({ name, id, color }) => {\r\n        dispatch(setBoardItemAction({name, id, color, data: []}))\r\n    }\r\n\r\n    const deleteBoard = (boardId) => {\r\n        dispatch(deleteBoardAction(boardId));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <BoardCreator createBoard={createBoard} />\r\n\r\n            <BoardList>\r\n                {\r\n                    stateData.boards.length ? stateData.boards.map((item, i) => {\r\n                        return <Board \r\n                            key={i} \r\n                            name={item.name} \r\n                            color={item.color} \r\n                            id={item.id} \r\n                            onClickHandler={deleteBoard}\r\n                        />\r\n                    })\r\n                    :\r\n                    <h1 style={{margin: '80px auto', color: '#a9a9a9', fontSize: '42px'}}>No boards</h1>\r\n                }\r\n            </BoardList>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Wrapper;","import styled from 'styled-components';\r\n\r\nexport const ActiveBoardComponent = styled.div` \r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: flex-start;\r\n    justify-content: center;\r\n    animation: fadeIn .4s ease;\r\n\r\n    & > h1 {\r\n        width: 240px;\r\n        heigth: 50px;\r\n        border-radius: 10px;\r\n        text-align: center;\r\n        padding: 15px 20px;\r\n        font-weight: 500;\r\n        margin: 0 0 0 60px;\r\n    }\r\n`\r\n\r\nexport const ActiveBoardList = styled.div`\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: flex-start;\r\n    margin: 50px 0 0 0;\r\n    padding: 0 0 30px 0;\r\n\r\n    & > button, & > div {\r\n        margin: 0 0 0 60px;\r\n    }\r\n\r\n    & > button {\r\n        width: 150px;\r\n        height: 80px;\r\n        border: 1px solid #000;\r\n        font-size: 20px;\r\n        background: #fff;\r\n        box-shadow: 1px 2px 7px #a9a9a9;\r\n        border-radius: 15px 15px 0 15px;\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n            background: #f2f2f2;\r\n        }\r\n    }\r\n`\r\n\r\nexport const ActiveBoardForm = styled.div`\r\n    width: 150px;\r\n    display: flex;\r\n    flex-direction: column;\r\n    padding: 20px 10px;\r\n    background: #fff;\r\n    box-shadow: 1px 2px 7px #a9a9a9;\r\n    justify-content: center;\r\n    align-items: center; \r\n    border-radius: 15px 15px 0 15px;\r\n    border: 1px solid #000;\r\n\r\n    & > input {\r\n        width: 100%;\r\n        height: 40px;\r\n        text-indent: 5px;\r\n        border: 1px solid #dcdcdc;\r\n        border-radius: 5px;\r\n    }\r\n\r\n    & > button {\r\n        margin: 15px 0 0 0;\r\n        width: 95%;\r\n        font-size: 18px;\r\n        height: 30px;\r\n        border-radius: 5px;\r\n        border: none;\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n            filter: brightness(90%);\r\n        }\r\n    }\r\n`","import styled from \"styled-components\"\r\n\r\nexport const TaskComponent = styled.div`\r\n    width: 100%;\r\n    padding: 10px;\r\n    box-shadow: 1px 1px 6px #dcdcdc;\r\n    border-radius: 10px;\r\n    text-align: left;\r\n    margin: 10px 0;\r\n    display: flex;\r\n    justify-content: space-between;\r\n    align-items: center;\r\n    touch-action: auto;\r\n    animation: fadeIn .5s ease;\r\n\r\n    & > section {\r\n        width: 75%;\r\n        text-align: left;\r\n        word-wrap: break-word;\r\n        user-select: text;\r\n    }\r\n\r\n    & > div {\r\n        width: 12.5%;\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        flex-direction: column;\r\n        cursor: pointer;\r\n\r\n        &:hover {\r\n            opacity: 0.5;\r\n        }\r\n    }\r\n`","import React, { useState } from 'react';\r\nimport { TaskComponent } from './Components';\r\n\r\nexport default ({ id, title, onClickHandler, toggleIsDoneHandler, status }) => {\r\n    let [isDone, setIsDone] = useState(status);\r\n\r\n    const onDragStartHandler = (ev) => {\r\n        ev.dataTransfer.setData(\"task\", JSON.stringify({ id, title }));\r\n    }\r\n    \r\n    const toggleHandler = () => {\r\n        setIsDone(!isDone);\r\n        toggleIsDoneHandler(id, !isDone);\r\n    }\r\n\r\n    return (\r\n        <TaskComponent draggable={true} onDragStart={onDragStartHandler}>\r\n            <section style={{textDecoration: isDone ? 'line-through' : 'none', color: isDone ? '#a9a9a9' : '#000'}}>\r\n                {title}\r\n            </section>\r\n\r\n            <div style={{color: 'forestgreen'}} onClick={toggleHandler}>\r\n                ✓\r\n            </div>\r\n\r\n            <div onClick={() => onClickHandler(id)}>\r\n                X\r\n            </div>\r\n        </TaskComponent>\r\n    )\r\n}","import styled from 'styled-components';\r\n\r\nexport const BoardItemComponent = styled.div`\r\n    width: 270px;\r\n    min-height: 100px;\r\n    background: #fff;\r\n    border-radius: 15px;\r\n    box-shadow: 1px 2px 8px #dcdcdc;\r\n    padding: 15px 8px 20px;\r\n    position: relative;\r\n    animation: fadeIn .4s ease;\r\n    display: flex;\r\n    flex-direction: column;\r\n    justify-content: center;\r\n    align-items: center;  \r\n\r\n    & > p {\r\n        font-weight: 400;\r\n        font-size: 20px;\r\n        margin: 5px 0;\r\n        text-align: center;\r\n    }\r\n\r\n    & > input {\r\n        width: 95%;\r\n        height: 40px;\r\n        margin: 10px auto;\r\n        border: 1px solid #dcdcdc;\r\n        border-radius: 10px;\r\n        text-indent: 10px;\r\n    }\r\n`\r\n\r\nexport const BoardItemClose = styled.div`\r\n    position: absolute;\r\n    right: -15px;\r\n    top: -15px;\r\n    width: 35px;\r\n    height: 35px;\r\n    opacity: 0.3;\r\n    cursor: pointer;\r\n    border-radius: 50%;\r\n    display: flex;\r\n    flex-direction: column;\r\n    align-items: center;\r\n    justify-content: center;\r\n\r\n    &:hover {\r\n        opacity: 1;\r\n    }\r\n\r\n    &:before, &:after {\r\n        position: absolute;\r\n        content: ' ';\r\n        height: 20px;\r\n        width: 2px;\r\n        background-color: #fff;\r\n    }\r\n\r\n    &:before {\r\n        transform: rotate(45deg);\r\n    }\r\n\r\n    &:after {\r\n        transform: rotate(-45deg);\r\n    }\r\n`","import React, { useState } from 'react';\r\nimport randomId from '../../../utils/randomId';\r\nimport Task from '../Task/Task';\r\nimport { BoardItemComponent, BoardItemClose } from './Components';\r\n\r\nexport default ({ \r\n    name, \r\n    id, \r\n    tasks, \r\n    color, \r\n    onClickHandler, \r\n    setTask, \r\n    deleteTask,\r\n    board,\r\n    toggleTaskStatus\r\n}) => {\r\n    let [ newTask, setNewTask ] = useState('');\r\n\r\n    const onChangeHandler = (ev) => {\r\n        let { value } = ev.currentTarget;\r\n\r\n        setNewTask(value);\r\n    }\r\n\r\n    const onKeyDownHandler = (ev) => {\r\n        if(ev.keyCode === 13 && !!newTask.length) {\r\n            let newTaskItem = {\r\n                id: randomId(),\r\n                title: newTask,\r\n                isDone: false\r\n            }\r\n\r\n            setTask(newTaskItem, id);\r\n            setNewTask('');\r\n        }\r\n    }\r\n\r\n    const onDropHandler = (ev) => {\r\n        ev.preventDefault();\r\n\r\n        let newTaskItem = JSON.parse(ev.dataTransfer.getData('task'));\r\n\r\n        board.data.forEach(item => {\r\n            item.tasks = item.tasks.filter(task => +task.id !== +newTaskItem.id);\r\n        })\r\n\r\n        ev.currentTarget.style.paddingBottom = '20px';\r\n\r\n\r\n        if(tasks.some(i => +i.id === +newTaskItem.id)) {\r\n            deleteTask(newTaskItem.id, id);\r\n        }\r\n\r\n        setTask(newTaskItem, id);\r\n    }\r\n    \r\n    const deteteHandler = (taskId) => {\r\n        deleteTask(taskId, id);\r\n    }\r\n\r\n    const toggleIsDoneHandler = (taskId, isDone) => {\r\n        toggleTaskStatus(taskId, id, isDone)\r\n    }\r\n\r\n    return (\r\n        <BoardItemComponent\r\n            onDragEnter={(ev) => {\r\n                ev.preventDefault();\r\n            }} \r\n            onDragLeave={(ev) => {\r\n                ev.preventDefault();\r\n                ev.currentTarget.style.paddingBottom = '20px';\r\n            }} \r\n            onDragOver={(ev) => { \r\n                ev.preventDefault()\r\n                ev.currentTarget.style.paddingBottom = '50px';\r\n            }}\r\n            onDrop={onDropHandler}\r\n        >\r\n            <p>{name}</p>\r\n\r\n            <input\r\n                onChange={onChangeHandler} \r\n                type=\"text\" \r\n                placeholder=\"Add a task\" \r\n                onKeyDown={onKeyDownHandler} \r\n                value={newTask}\r\n            />\r\n\r\n            <div style={{width: '100%'}}>\r\n                {\r\n                    tasks.length ?\r\n                    tasks.map(task => {\r\n                        return <Task \r\n                            key={task.id} \r\n                            title={task.title} \r\n                            id={task.id} \r\n                            onClickHandler={deteteHandler} \r\n                            toggleIsDoneHandler={toggleIsDoneHandler}\r\n                            status={task.isDone}\r\n                        />\r\n                    })\r\n                    :\r\n                    null\r\n                }\r\n            </div>\r\n\r\n            <BoardItemClose style={{background: color}} onClick={() => onClickHandler(id)} />\r\n        </BoardItemComponent>\r\n    )\r\n}","import React, { useEffect, useState, Fragment } from 'react';\r\nimport { withRouter, Redirect } from 'react-router-dom';\r\nimport { connect } from 'react-redux';\r\nimport { \r\n    setActiveBoardItems, \r\n    setActiveBoardItem, \r\n    deleteActiveBoardItem, \r\n    deleteBoardAction, \r\n    setTaskToBoardItem, \r\n    deleteTaskFromBoardItem,\r\n    toggleItemTaskStatus,\r\n    updateBoardColor\r\n} from '../../../redux/reducers/boardsReducer';\r\nimport { compose } from 'redux';\r\nimport { ActiveBoardComponent, ActiveBoardList, ActiveBoardForm } from './Components';\r\nimport { changeHeaderColorAction } from '../../../redux/reducers/headerReducer';\r\nimport randomId from '../../../utils/randomId';\r\nimport BoardItem from '../BoardItem/BoardItem';\r\nimport { BoardItemClose } from '../BoardItem/Components';\r\nimport { useBoard } from './hook/useBoard.hook';\r\nimport { colors } from '../../BoardCreator/BoardCreator';\r\nimport { CreatorColorCircle } from '../../BoardCreator/Components';\r\n\r\nconst ActiveBoard = ({\r\n    match: {params: {id}}, \r\n    boards, \r\n    setActiveBoardItems, \r\n    changeHeaderColorAction, \r\n    setActiveBoardItem,\r\n    deleteActiveBoardItem,\r\n    deleteBoardAction,\r\n    setTaskToBoardItem,\r\n    deleteTaskFromBoardItem,\r\n    toggleItemTaskStatus,\r\n    updateBoardColor\r\n}) => {\r\n    let { board, data, getBoardData, setBoardItem } = useBoard(boards, id);\r\n    let [addMode, setAddMode] = useState(false);\r\n    let [itemName, setItemName] = useState('');\r\n    let [isDeleted, setIsDeleted] = useState(false);\r\n\r\n    useEffect(() => {\r\n        getBoardData();\r\n    }, [getBoardData])\r\n\r\n    useEffect(() => {\r\n        setActiveBoardItems(data);\r\n    }, [data, setActiveBoardItems])\r\n\r\n    useEffect(() => {\r\n        changeHeaderColorAction(board.color);\r\n    }, [board, changeHeaderColorAction])\r\n\r\n    const onInputHandler = (ev) => {\r\n        let { value } = ev.currentTarget;\r\n\r\n        setItemName(value);\r\n    }\r\n\r\n    const addBoardItem = () => {\r\n        let randId = randomId();\r\n\r\n        let boardItem = {\r\n            id: randId,\r\n            name: itemName,\r\n            tasks: []\r\n        }\r\n\r\n        setBoardItem(boardItem);\r\n        setActiveBoardItem({ item: boardItem, boardId: id });\r\n        setAddMode(false);\r\n        setItemName('');\r\n    }\r\n\r\n    const deleteBoardTask = (itemId) => {\r\n        deleteActiveBoardItem({ itemId, boardId: id });\r\n    }\r\n\r\n    const deleteBoard = () => {\r\n        deleteBoardAction(id);\r\n\r\n        setIsDeleted(true);\r\n    }\r\n\r\n    const setTask = (task, itemId) => {\r\n        setTaskToBoardItem({ task, itemId, boardId: id });\r\n    }\r\n\r\n    const deleteTask = (taskId, itemId) => {\r\n        deleteTaskFromBoardItem({ taskId, itemId, boardId: id });\r\n    }\r\n\r\n    const toggleTaskStatus = (taskId, itemId, isDone) => {\r\n        toggleItemTaskStatus({ taskId, itemId, boardId: id, isDone })\r\n    }\r\n\r\n    const updateColor = (color) => {\r\n        updateBoardColor({ boardId: id, color });\r\n        changeHeaderColorAction(color);\r\n    }\r\n\r\n    return (\r\n        <ActiveBoardComponent>\r\n            <Fragment>\r\n                <h1 style={{background: board.color ? board.color : '#fff', color: board.color ? '#fff' : '#000'}}>{board.name}</h1>\r\n\r\n                <BoardItemClose style={{left: '360px', top: '105px', background: board.color, width: '50px', height: '50px', borderRadius: '20%'}} onClick={deleteBoard} />\r\n\r\n                <section style={{display: 'flex', left: '460px', top: '103px', position: 'absolute'}}>\r\n                    {\r\n                        colors.map((color, i) => {\r\n                            return <CreatorColorCircle \r\n                                onClick={() => updateColor(color)} \r\n                                key={i} \r\n                                style={{background: color, width: '45px', height: '45px'}} \r\n                            />\r\n                        })\r\n                    }\r\n                </section>\r\n            </Fragment>\r\n\r\n            <ActiveBoardList>\r\n                {\r\n                    data.length ? \r\n                    data.map((item, i) => {\r\n                        return <BoardItem \r\n                            board={board}\r\n                            key={i}\r\n                            name={item.name} \r\n                            tasks={item.tasks} \r\n                            id={item.id} \r\n                            color={board.color ? board.color : '#fff'}\r\n                            onClickHandler={deleteBoardTask}\r\n                            setTask={setTask}\r\n                            deleteTask={deleteTask}\r\n                            toggleTaskStatus={toggleTaskStatus}\r\n                        />\r\n                    })\r\n                    :\r\n                    null\r\n                }\r\n                \r\n                {\r\n                    addMode ?\r\n                    <ActiveBoardForm>\r\n                        <input type=\"text\" placeholder=\"Add list name\" onInput={onInputHandler} />\r\n\r\n                        <button \r\n                            style={{background: board.color ? board.color : '#fff', color: board.color ? '#fff' : '#000'}} \r\n                            onClick={addBoardItem}\r\n                            disabled={!itemName.length}\r\n                        >\r\n                            Add\r\n                        </button>\r\n                    </ActiveBoardForm>\r\n                    :\r\n                    <button onClick={() => setAddMode(true)}>\r\n                        Add a list\r\n                    </button>\r\n                }\r\n            </ActiveBoardList>\r\n\r\n            {\r\n                isDeleted && <Redirect to={'/'} />\r\n            }\r\n        </ActiveBoardComponent>\r\n    )\r\n}\r\n\r\nlet mapStateToProps = (state) => ({\r\n    boards: state.boardData.boards\r\n});\r\n\r\nexport default compose(\r\n    withRouter,\r\n    connect(mapStateToProps, {\r\n        setActiveBoardItems,\r\n        changeHeaderColorAction,\r\n        setActiveBoardItem,\r\n        deleteActiveBoardItem,\r\n        deleteBoardAction,\r\n        setTaskToBoardItem,\r\n        deleteTaskFromBoardItem,\r\n        toggleItemTaskStatus,\r\n        updateBoardColor\r\n    })\r\n)(ActiveBoard);","import { useCallback, useState } from \"react\";\r\n\r\nexport const useBoard = (boards, id) => {\r\n    let [data, setData] = useState([]); // [ {_id: 1, name: 'Udemy', tasks: [ {id: 1, title: 'Buy a course'} ]} ]\r\n    let [board, setBoard] = useState({});\r\n\r\n    const getBoardData = useCallback(() => {        \r\n        if(!!boards.length) {\r\n            let board = boards.filter(b => b.id === +id);\r\n\r\n            if(board.length) {\r\n                let boardItems = board[0].data || [];\r\n\r\n                if(!boardItems.length) {\r\n                    board[0].data = [];\r\n                    boardItems = [];\r\n                }\r\n\r\n                setBoard(board[0]);\r\n                setData(boardItems);\r\n            }\r\n            else {\r\n                setBoard({});\r\n                setData([]);\r\n            }\r\n        }\r\n\r\n        return;\r\n    }, [boards, id])\r\n\r\n    const setBoardItem = useCallback((item) => {\r\n        setData(prev => ([\r\n            ...prev,\r\n            item\r\n        ]))\r\n    }, [])\r\n\r\n    return {\r\n        board,\r\n        data,\r\n        getBoardData,\r\n        setBoardItem\r\n    }\r\n}","import React, { useEffect } from 'react';\nimport Header from './components/Header/Header';\nimport { Switch, Route, BrowserRouter as Router, Redirect } from 'react-router-dom';\nimport Wrapper from './components/Wrapper/Wrapper';\nimport { useDispatch } from 'react-redux';\nimport { setBoardDataAction } from './redux/reducers/boardsReducer';\nimport ActiveBoard from './components/Board/ActiveBoard/ActiveBoard';\nimport { getData, deleteData } from './utils/configStorage';\nimport './App.css';\n\nconst App = () => {\n  const dispatch = useDispatch();\n\n  useEffect(() => {\n    let lsitems = getData();\n\n    try {\n      if(lsitems.boards.length && lsitems.boards[0] !== null) {\n        let { boards } = lsitems;\n\n        dispatch(setBoardDataAction(boards));\n      }\n    }\n    catch(err) {\n      deleteData();\n    }\n  }, [dispatch])\n\n  return <Router>\n    <div className=\"App\">\n      <Header />\n\n      <section className='Section'>\n        <Switch>\n          <Route path={'react-shello-app/board/:id?'} exact component={ActiveBoard} />\n          <Route path={'/react-shello-app/'} exact component={Wrapper} />\n\n          <Redirect to={'/react-shello-app/'} />\n        </Switch>\n      </section>\n    </div>\n  </Router>\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { createStore, combineReducers } from 'redux';\r\nimport boardsReducer from './reducers/boardsReducer';\r\nimport headerReducer from './reducers/headerReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    boardData: boardsReducer,\r\n    header: headerReducer\r\n});\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nwindow.store = store;\r\n\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { Provider } from 'react-redux';\nimport store from './redux/store';\nimport './index.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}